#!/usr/bin/env python
# vim: set fileencoding=utf-8 :
# Andre Anjos <andre.anjos@idiap.ch>
# Elie Khoury < elie.khoury@idiap.ch>
# Wed 20 Jan 2016 14:35:05 CET
#
# Copyright (C) 2011-2016 Idiap Research Institute, Martigny, Switzerland


"""Tests audio reader and writer based on sox for bob and python
"""

import os

import nose.tools
import pkg_resources

import scipy.io.wavfile
import numpy

import bob.io.base
import bob.io.matlab
from . import reader, writer


def F(f):
  """Returns the test file on the "data" subdirectory"""
  return pkg_resources.resource_filename(__name__, os.path.join('data', f))


def run_for(fname):

  # audio file name
  infile = F(fname)

  # reading the file using our SoX bindings
  f = reader(infile)
  data = f.load()

  # reading the file using scipy.io.wavfile
  (scipy_rate, scipy_data) = scipy.io.wavfile.read(infile)

  # verify if the rates are the same
  nose.tools.eq_(int(f.rate), scipy_rate)

  # If one channel
  if data.shape[0] == 1:
    # verify if the data are the same (x 2^15)
    assert numpy.array_equal((data[0]*pow(2,15)).astype(int), scipy_data)

  # If more than one channel
  elif data.shape[0] > 1:

    # verify if the nchannels are the same
    nose.tools.eq_(data.shape[0], scipy_data.shape[1])

    # verify if the data are the same (x 2^15)
    for i in range(data.shape[0]):
      assert numpy.array_equal((data[i]*pow(2,15)).astype(int), scipy_data[:,i])


def test_read_mono_wav():
  run_for('sample1.wav')


def test_read_stereo_wav():
  run_for('sample4.wav')


def test_read_mono_wav_matlab():

  # audio file name
  infile = F('sample3.wav')

  # reading the file using xbob.sox
  f = reader(infile)
  data = f.load()

  # reading the .mat file that contains the data generated by the Matlab
  # wavread function
  mat_data = bob.io.base.load(F('sample3.mat'))
  assert numpy.array_equal(data, mat_data)


# TODO: could add test for writing
